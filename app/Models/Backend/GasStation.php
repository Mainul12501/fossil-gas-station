<?php

namespace App\Models\Backend;

use App\Models\Scopes\Searchable;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Factories\HasFactory;

class GasStation extends Model
{
    use HasFactory;
    use Searchable;

    protected $fillable = [
        'gas_station_id',
        'key_people_id',
        'name',
        'overview',
        'sub_images',
        'office_address',
        'office_phone_number',
        'state',
        'state_id',
        'zip_code',
        'fb',
        'insta',
        'telegram',
        'linkedin',
        'skype',
        'whatsapp',
        'location_map',
        'status',
        'slug',
        'seo_header',
        'seo_footer',
        'logo',
        'main_image',
        'office_email_1',
        'office_email_2',
        'office_email_3',
        'office_phone_number_2',
        'incorporated_year',
        'lat',
        'lon',
    ];

    protected $searchableFields = ['*'];

    protected $table = 'gas_stations';

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::deleting(function ($gasStation) {
            if (!empty($gasStation->gasStationEmployees) && count($gasStation->gasStationEmployees) > 0)
            {
                $gasStation->gasStationEmployees()->detach();
            }
            if (!empty($gasStation->gasStations))
            {
                $gasStation->gasStations->each->delete();
            }
            if (file_exists($gasStation->logo))
                unlink($gasStation->logo);

            if (file_exists($gasStation->main_image))
                unlink($gasStation->main_image);

            if (isset($gasStation->sub_images))
            {
                foreach (json_decode($gasStation->sub_images) as $item)
                    unlink($item);
            }
        });
    }

    public static function createOrUpdateGasStation($request, $id = null)
    {
        return static::updateOrCreate(['id' => $id], [
            'gas_station_id'    => $request->gas_station_id ?? 0,
            'key_people_id' => $request->key_people_id ,
            'name'  => $request->name,
            'overview'  => $request->overview,
            'sub_images'    => self::saveAndGenerateSubImagesPaths($request, $id ?? null),
            'office_address'    => $request->office_address,
            'office_phone_number'   => $request->office_phone_number,
            'state' => $request->state,
            'state_id'  => $request->state_id,
            'zip_code'  => $request->zip_code,
            'fb'    => $request->fb,
            'insta' => $request->insta,
            'telegram'  => $request->telegram,
            'linkedin'  => $request->linkedin,
            'skype' => $request->skype,
            'whatsapp'  => $request->whatsapp,
            'location_map'  => $request->location_map,
            'status'    => $request->status == 'on' ? 1 : 0,
            'slug'  => str_replace(' ', '-', $request->name).'-'.(!isset($id) ? (static::latest()->first()->id ?? 0)+1 : static::find($id)->id),
            'seo_header'    => $request->seo_header,
            'seo_footer'    => $request->seo_footer,
            'logo'  => fileUpload($request->file('logo'), 'gas-stations-logo', 'station-logo-', isset($id) ? static::find($id)->logo : null),
            'main_image'    => fileUpload($request->file('main_image'), 'gas-stations-main-image', 'station-main-image-', isset($id) ? static::find($id)->main_image : null),
            'office_email_1' => $request->office_email_1,
            'office_email_2' => $request->office_email_2,
            'office_email_3' => $request->office_email_3,
            'office_phone_number_2' => $request->office_phone_number_2,
            'incorporated_year' => $request->incorporated_year,
            'lat' => $request->lat,
            'lon' => $request->lon,
        ]);
    }

    public static function saveAndGenerateSubImagesPaths($request, $id = null)
    {
        if (isset($request->sub_images))
        {
            if (isset($id))
            {
                $existData = GasStation::find($id);
                if (isset($existData->sub_images))
                {
                    foreach (json_decode($existData->sub_images) as $item)
                    {
                        if (file_exists($item))
                            unlink($item);
                    }
                }
            }
            $jsonArray = [];
            foreach ($request->sub_images as $sub_image)
            {
                array_push($jsonArray, fileUpload($sub_image, 'gas-station-sub-images', 'sub-images-' ));
            }
            return json_encode($jsonArray);
        } else{
            if (isset($id))
            {
                return $existData = GasStation::find($id)->sub_images;
            } else {
                return null;
            }
        }
    }

    public function gasStation()
    {
        return $this->belongsTo(GasStation::class);
    }

    public function gasStations()
    {
        return $this->hasMany(GasStation::class);
    }

    public function gasStationKeyPeople()
    {
        return $this->belongsTo(GasStationEmployee::class, 'key_people_id');
    }

    public function gasStationEmployees()
    {
        return $this->belongsToMany(GasStationEmployee::class);
    }
}
